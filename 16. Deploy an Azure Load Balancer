10. Deploy an Azure Load Balancer
	• Goal: Set up a Load Balancer to distribute traffic.
	• Tasks:
		○ Deploy an Azure Load Balancer.
		○ Attach multiple VMs as backend targets.
		○ Configure health probes to monitor VM status.
	• Focus Areas: High availability, load balancin





#================= Provider ===================
terraform {
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "4.20.0"
    }
  }
}
provider "azurerm" {
  # Configuration options
  features {}
  subscription_id = "c23a3174-f9e7-4414-9f75-966ddbb786fb"
}





resource "random_string" "random_string_1" {
  length  = 5
  lower   = true
  numeric = false
  special = false
  upper   = false
}

# Resource Group
resource "azurerm_resource_group" "test1" {
  name     = "rg1-test-lb"
  location = "East US"
}

# Vritual Network
resource "azurerm_virtual_network" "testvm1" {
  name                = "VM-${random_string.random_string_1.result}"
  address_space       = ["10.0.0.0/16"]
  location            = azurerm_resource_group.test1.location
  resource_group_name = azurerm_resource_group.test1.name
}

# Subnet
resource "azurerm_subnet" "subnet1" {
  name                 = "subnet-${random_string.random_string_1.result}"
  resource_group_name  = azurerm_resource_group.test1.name
  virtual_network_name = azurerm_virtual_network.testvm1.name
  address_prefixes     = ["10.0.2.0/24"]
}

# NIC
resource "azurerm_network_interface" "NIC1" {
  count               = 2
  name                = "nic-${random_string.random_string_1.result}-${count.index}"
  location            = azurerm_resource_group.test1.location
  resource_group_name = azurerm_resource_group.test1.name
  ip_configuration {
    name                          = "internal-${random_string.random_string_1.result}-${count.index}"
    subnet_id                     = azurerm_subnet.subnet1.id
    private_ip_address_allocation = "Dynamic"
  }
}

# NIC association
resource "azurerm_network_interface_security_group_association" "NSG-NIC1" {
  count                     = 2
  network_interface_id      = azurerm_network_interface.NIC1[count.index].id
  network_security_group_id = azurerm_network_security_group.NSG1.id
}

# Virtual Machine
resource "azurerm_windows_virtual_machine" "vmtest" {
  count               = 2
  name                = "vmtest-${random_string.random_string_1.result}-${count.index}"
  resource_group_name = azurerm_resource_group.test1.name
  location            = azurerm_resource_group.test1.location
  size                = "Standard_B1s"
  admin_username      = "admind"
  admin_password      = "Vanguard1234"
  network_interface_ids = [
    azurerm_network_interface.NIC1[count.index].id,
  ]
  os_disk {
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
  }
  source_image_reference {
    publisher = "MicrosoftWindowsServer"
    offer     = "WindowsServer"
    sku       = "2022-datacenter-g2"
    version   = "latest"
  }
}
resource "azurerm_network_security_group" "NSG1" {
  name                = "acceptanceTestSecurityGroup1-${random_string.random_string_1.result}"
  location            = azurerm_resource_group.test1.location
  resource_group_name = azurerm_resource_group.test1.name
}

# Security Rule Allowing RDP (3389)
resource "azurerm_network_security_rule" "rdp-test" {
  name                        = "test-${random_string.random_string_1.result}"
  priority                    = 1001
  direction                   = "Inbound"
  access                      = "Allow"
  protocol                    = "Tcp"
  source_port_range           = "*"
  destination_port_range      = "3389"
  source_address_prefix       = "*"
  destination_address_prefix  = "*"
  resource_group_name         = azurerm_resource_group.test1.name
  network_security_group_name = azurerm_network_security_group.NSG1.name
}


resource "azurerm_public_ip" "pubip1" {
  name                = "PublicIPForLB"
  location            = azurerm_resource_group.test1.location
  resource_group_name = azurerm_resource_group.test1.name
  allocation_method   = "Static"
}

# Load Balancer

resource "azurerm_lb" "load_balancer_1" {
  name                = "TestLoadBalancer"
  location            = azurerm_resource_group.test1.location
  resource_group_name = azurerm_resource_group.test1.name

  frontend_ip_configuration {
    name                 = "PublicIPAddressLoadBlancer"
    public_ip_address_id = azurerm_public_ip.pubip1.id
  }
}


# NAT Pool

resource "azurerm_lb_nat_pool" "natpool" {
  resource_group_name            = azurerm_resource_group.test1.name
  loadbalancer_id                = azurerm_lb.load_balancer_1.id
  name                           = "SampleApplicationPool"
  protocol                       = "Tcp"
  frontend_port_start            = 80
  frontend_port_end              = 81
  backend_port                   = 8080
  frontend_ip_configuration_name = "PublicIPAddressLoadBlancer"
}

# NAT Rules

resource "azurerm_lb_nat_rule" "example" {
  resource_group_name            = azurerm_resource_group.test1.name
  loadbalancer_id                = azurerm_lb.load_balancer_1.id
  name                           = "RDPAccess"
  protocol                       = "Tcp"
  frontend_port                  = 3389
  backend_port                   = 3389
  frontend_ip_configuration_name = "PublicIPAddressLoadBlancer"
}

# resource "azurerm_lb_nat_rule" "example1" {
  #resource_group_name            = azurerm_resource_group.test1.name
  #loadbalancer_id                = azurerm_lb.load_balancer_1.id
  #name                           = "RDPAccess-1"
  #protocol                       = "Tcp"
  #frontend_port_start            = 3000
  #frontend_port_end              = 3389
  #backend_port                   = 3389
 # backend_address_pool_id        = azurerm_lb_backend_address_pool.lb_backpool1.id
  ##frontend_ip_configuration_name = "PublicIPAddressLoadBlancer"
#}


# probe
resource "azurerm_lb_probe" "probe1" {
  loadbalancer_id = azurerm_lb.load_balancer_1.id
  name            = "rdp-running-probe"
  port            = 3389
}


# Backend Address Pool

resource "azurerm_lb_backend_address_pool" "lb_backpool1" {
  loadbalancer_id = azurerm_lb.load_balancer_1.id
  name            = "BackEndAddressPool"
}

resource "azurerm_lb_backend_address_pool_address" "example" {
  name                    = "example"
  backend_address_pool_id = azurerm_lb_backend_address_pool.lb_backpool1.id
  virtual_network_id      = azurerm_virtual_network.testvm1.id
  ip_address              = "10.0.2.1"
}



resource "azurerm_lb_backend_address_pool_address" "example-1" {
  name                                = "address1"
  backend_address_pool_id             = azurerm_lb_backend_address_pool.lb_backpool1.id
  ip_address                          = azurerm_network_interface.NIC1[0].ip_configuration[0].private_ip_address
  virtual_network_id                  = azurerm_virtual_network.testvm1.id
}

resource "azurerm_lb_backend_address_pool_address" "example-2" {
  name                                = "address2"
  backend_address_pool_id             = azurerm_lb_backend_address_pool.lb_backpool1.id
  ip_address                          = azurerm_network_interface.NIC1[1].ip_configuration[0].private_ip_address
  virtual_network_id                  = azurerm_virtual_network.testvm1.id
}



